<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAEACAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAABIAAAAAAAAAAAAAAAEAAAAA
        AAAAAAAA////AICAgACAgP8AgAD/ACAgIABgYGAA4ODgAKCgoABAYP8AQEDgAEAg4AAgoOAAIKAAAEBg
        4AAAIEAAIGCAAMCggABgoMAAAODAAACg4ABgoOAAIMAgAEAgwAAgIOAAQCD/AIiIiACoqKgAeHh4AJiY
        mAC4uLgAaGhoAMjIyABISEgAIKD4AFhYWAAgqPgA6OjoACgoKAA4ODgA+Pj4ANjY2AAgmPgAGBgYAAgI
        CAAgkPgAIKj/AICAiAAgsPgAiIiQACi4/wAowP8AKLD/AJCYmADY0NAAIJj/ACio/wCIgIAAmJigAKCg
        qAAYICAASEhQAFBQWABgWFgACDhgAJiYkACgmJgAuLCwALCwuADY0MgAILj4AAgAAAAYEAgAGBgQACAY
        GAAoICAAABgoAAgYKAAoKDAAQDgwAEhIQABIUFAAWFBQADhQWABYYGAAcGhgAHBoaABgaHAAaGhwAHBw
        eABweHgAgHh4AHB4gAB4gIAAgIiIAIiQkAAYYJgAmKCgAKigoACoqKAAoKioAMDAyADIyNAAGIDYABiI
        4AAgiOAAIKjgACCo6AAouPgA//j4AP//+AAICAAAcAgAAAAACAAACAgAAAgQABgQEAAAABgAAAgYAAAQ
        GAAQEBgAICAYACggGAAwIBgAEBggABgYIAAoKCAAMCggAAggKAAYICgAICgoABgoMAAoMDAAODgwAAgY
        OAAIIDgACCg4AEBAOABIQDgAODhAAEhAQAAIKEgAADBIABAwSAAQOEgAQEBIAFBISAAIMFAAKEBQAAgw
        WAAgOFgAGEBYACBAWABASFgAUFhYAGhgWABwYFgAeGhYAAhAYAAYQGAAKEhgAGhgYACAaGAACDhoAAhA
        aAAoSGgAKFBoAEBgaABgYGgAYGhoAHhwaAAIQHAAKFBwAFhgcAAQSHgACFB4ABBYeAAgWHgAgIB4AAhI
        gAAQWIAAeHiAAIB4gACYiIAAoIiAAMiYgAAISIgAEFCIAABYiAAIWIgAEFiIACBYiAAQYIgAGGCIAEBo
        iACQiIgAiJCIAAhQkAAIYJAAGGCQABhokACAiJAAmJCQAKCYkADYuJAAAFCYAABgmAAQYJgAEGiYACho
        mACQkJgAIHigALiooAAIcKgAGHCoALCwqADAsKgACHCwABh4sACoqLAAsKiwAMi4sAAYcLgAGHi4AAiA
        uADAuLgAwMC4AMjAuADQwLgAAGjAAAhwwAC4uMAAyMjAAAhoyAAYeMgAIIDIACCIyADAyMgAGIDQABCI
        0AAoiNAACJDQAJi40ADI0NAACIjYACCI2AAQkNgAGJDYACCY2AAwqNgAGJDgANjY4ADo6OAAGIjoAAiY
        6AAgmOgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADX
        Kx8AAAAAAEOJAAAhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDLAbcCAgdHdJfGjECWSEGIAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhACsCGxsdCAjKXzEaGhoG
        IwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABZLAYIRBscWR8cHTUa
        GhoCVgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUYUgHh4CygAH
        WVEa0jEaBhoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACcfZdcg
        HBsAAADXBgIaBh0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADK
        Gh4e11kaAAAAANcfHB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAA88oCHBwCAAAAAAAAAh0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////////
        //////////////////////////////////////j4H///////8HAf///////gEA///////8AAD///////
        gAAf//////+AAD///////4AAP///////gAAP/gf///xoAAP+A///+HAAA/4B///wAAACPAD///AAAAAY
        AJ//4AAAAAAAA//gAAAEAAMB/8AABggABwD/wAAPDAAAAP/AAAE8AAAA/4AAAP+AAACDgAAA/gAAAQEA
        AAD+AAADAAAAAfwAAAcAAAAB+AAAAwAAAAP4AAABAAAAB4QCAAGAAAAHAAcAAeAAAAICBAABgAAAAAGI
        AIEAAAAAAfgAgwAAAAAD+AHHAAAAAAf8A/8AAAAAAf8H/wDgAAAAf+//AMAAAAA////AAAAAAD////IA
        AAAAf////gAAAAB/////AAAAAP/////AAABA//////AAAOH//////gAAv///////gAAf///////gAA//
        /////8AAH///////gAAf//////8AgD///////4Dgf///////gPD///////+B+f//////////////////
        ////////////////////////////////////////////////////////////////////////
</value>
  </data>
</root>